#!/bin/sh -e

[ "$(id -u)" -eq 0 ] || { echo needs root; exit 1; }

DIR=$(readlink -f $(dirname $0))

MIRROR=mirror.mdfnet.se/gentoo

ROOTFS=$DIR/rootfs
DISTDIR=$DIR/distfiles
PKGDIR=$DIR/packages

rootfs() {
	local p=-systemd
	local a=amd64
	local d=releases/$a/autobuilds

	if ! [ -d $ROOTFS/etc ]; then
		mkdir -p $ROOTFS
		local t=$(curl -s https://$MIRROR/$d/latest-stage3-$a$p.txt |
			awk 'END {print $1 }')
		curl https://$MIRROR/$d/$t |
			tar -C $ROOTFS -xjp --xattrs
	fi

	mkdir -p $DISTDIR $PKGDIR
}

_mnt() {
	local typ=$1
	local dir=$2
	shift 2

	grep -q $ROOTFS/$dir /proc/mounts ||
		mount $typ $ROOTFS/$dir "$@"
}

mnt() {
	local d

	_mnt proc proc -t proc -o nosuid,noexec,nodev
	_mnt sys sys -t sysfs -o nosuid,noexec,nodev
	_mnt efivars sys/firmware/efi/efivars -t efivarfs -o nosuid,noexec,nodev
	_mnt udev dev -t devtmpfs -o mode=0755,nosuid
	_mnt devpts dev/pts -t devpts -o mode=0620,gid=5,nosuid,noexec
	_mnt shm dev/shm -t tmpfs -o mode=1777,nosuid,nodev
	_mnt /run run --bind
	_mnt tmp tmp -t tmpfs -o mode=1777,strictatime,nodev,nosuid

	mkdir -p $ROOTFS/usr/local/portage
	_mnt $(readlink -f $DIR/..) usr/local/portage --bind
}

conf() {
	mkdir -p $ROOTFS/etc/portage/repos.conf
	cat <<-EOF >$ROOTFS/etc/portage/repos.conf/uggedal.conf
	[uggedal]
	location = /usr/local/portage
	masters = gentoo
	auto-sync = no
	EOF

	cat <<-EOF >$ROOTFS/etc/portage/make.conf
	USE=""
	MAKEOPTS="--jobs=4 --load-average=4.0"
	EMERGE_DEFAULT_OPTS="--jobs=4 --load-average=4.0"
	FEATURES="buildpkg"

	GENTOO_MIRRORS="https://$MIRROR/"

	DISTDIR="/usr/local/portage/build/distfiles"
	PKGDIR="/usr/local/portage/build/packages"

	LC_MESSAGES=C
	EOF

	rm -f $ROOTFS/etc/portage/make.profile
	ln -s ../../usr/local/portage/profiles/amd64 \
		$ROOTFS/etc/portage/make.profile

	cp /etc/resolv.conf $ROOTFS/etc/

	cp $DIR/world $ROOTFS/var/lib/portage/world

	rm -rf $ROOTFS/etc/portage/savedconfig
	cp -r $DIR/savedconfig $ROOTFS/etc/portage
}

prepare() {
	chroot $ROOTFS /usr/bin/eselect news read --quiet all

	if ! [ -d $ROOTFS/var/db/repos/gentoo ]; then
		chroot $ROOTFS /usr/bin/emerge-webrsync
	fi
}

emerge() {
	local opts='
		--complete-graph=y
		--keep-going=y
		--with-bdeps=y
	'

	if ! [ -t 1 ]; then
		opts="
			$opts
			--color=n
			--nospinner
			--quiet=y
		"
	fi

	if [ "$FORCE" ]; then
		opts="$opts -e"
	else
		opts="$opts -uND"
	fi

	chroot $ROOTFS /usr/bin/emerge $opts "$@" @world
}

cleanup() {
	if [ "$NO_CLEANUP" ]; then
		return
	fi
	chroot $ROOTFS /usr/bin/emerge --depclean
}

_umnt() {
	umount $ROOTFS/$1
}

umnt() {
	_umnt usr/local/portage

	_umnt tmp
	_umnt run
	_umnt dev/shm
	_umnt dev/pts
	_umnt dev
	_umnt sys/firmware/efi/efivars
	_umnt sys
	_umnt proc
}

if [ "$1" = -f ]; then
	FORCE=y
	shift
fi

trap umnt INT TERM EXIT

rootfs
mnt
conf
prepare
emerge "$@"
cleanup
