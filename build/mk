#!/bin/sh -e

DIR=$(readlink -f $(dirname $0))
. $DIR/lib.sh

MIRROR=mirror.mdfnet.se/gentoo

rootfs() {
	local p=nomultilib
	local a=amd64
	local d=releases/$a/autobuilds

	if ! [ -d $ROOTFS/etc ]; then
		mkdir -p $ROOTFS
		local t=$(curl -s https://$MIRROR/$d/latest-stage3-$a-$p.txt |
			awk 'END {print $1 }')
		curl https://$MIRROR/$d/$t |
			tar -C $ROOTFS -xJp --xattrs
	fi

	mkdir -p $DISTDIR $PKGDIR
}

prepare() {
	chroot $ROOTFS /usr/bin/eselect news read --quiet all

	if ! [ -d $ROOTFS/var/db/repos/gentoo ]; then
		chroot $ROOTFS /usr/bin/emerge-webrsync
	fi
}

emerge() {
	local opts='
		--complete-graph=y
		--keep-going=y
		--with-bdeps=y
	'

	if ! [ -t 1 ]; then
		opts="
			$opts
			--color=n
			--nospinner
			--quiet=y
		"
	fi

	if [ "$FORCE" ]; then
		opts="$opts -e"
	else
		opts="$opts -uND"
	fi

	chroot $ROOTFS /usr/bin/emerge $opts "$@" @world
}

cleanup() {
	if [ "$NO_CLEANUP" ]; then
		return
	fi
	chroot $ROOTFS /usr/bin/emerge --depclean
}

if [ "$1" = -f ]; then
	FORCE=y
	shift
fi

rootfs
mnt
conf
prepare
emerge "$@"
cleanup
